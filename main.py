import streamlit as st
from streamlit_tags import st_tags
# from dotenv import load_dotenv
# import tiktoken
import datetime
from st_chat_message import message
import openai
from streamlit_pills import pills
import requests
# load_dotenv()

st.set_page_config(
    page_title="Freele App",
    page_icon="üíº",
    # layout="wide",
    initial_sidebar_state="expanded",
)

# –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç—å –º–æ–≥—É –ª–∏ —è —Ä–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞–≤–∫—É —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ.
prompt_template = """–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø—ã—Ç–Ω—ã–º AI HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω. –Ø - –§—Ä–∏–ª–∞–Ω—Å–µ—Ä. –û—Ü–µ–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç 1 –¥–æ 10. –ë—É–¥—å —Å–æ –º–Ω–æ–π —Å—Ç—Ä–æ–≥ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω.
–†–∞—Å–ø–∏—à–∏ –≤—Å–µ –º–æ–∏ –ø–ª—é—Å—ã –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –Ø —Ö–æ—á—É —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –¢–∞–∫–∂–µ —è —Ö–æ—á—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ.
–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ:
–Ø –∏—â—É —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {position}, –≤ —Å—Ñ–µ—Ä–µ: {category};
–û–±–æ –º–Ω–µ: {about};
–ú–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {job_experience};
–ú–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education};
–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤: {languages};
–ú–æ–∏ Hard Skills: {hard_skills};
–ú–æ–∏ Soft Skills: {soft_skills};
–Ø –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Å—å –Ω–∞ –æ–ø–ª–∞—Ç—É –≤: {price} —Ç–µ–Ω–≥–µ –≤ —á–∞—Å.
"""

openai.api_key = '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'

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-4"
if "messages" not in st.session_state:
    st.session_state.messages = []

# if 'messages' not in st.session_state:
#     st.session_state['messages'] = []
#     st.session_state['messages'].append(
#         # {"role": "system", "content": "You are ChatGPT, a large language model trained by OpenAI. Follow the user's instructions carefully. Respond using markdown."}
#         {"role": "system", "content": "You are a helpful assistant."}
#     )

with st.sidebar:
    st.image("https://peopleworks.in/wp-content/uploads/2018/03/AI.jpg")

    st.title('üíº Freele')
    st.write('Freele - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã.')
    functionality = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
    ["–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞", "–ü–æ–¥–±–æ—Ä —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", "–ü–æ–¥–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞"],
    captions = ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò", "–ò–ò –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", "–ò–ò –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"]
    )

if functionality == "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞":
    st.title("–ü—Ä–æ—Ñ–∏–ª—å –§—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞")
    selected = pills("", ["AI", "Tech"], ["ü§ñ", "üíª"])

    st.header("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    domain = st.text_input("–ü–æ–∑–∏—Ü–∏—è", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    job_category = st.selectbox(
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    ("–í–µ–± —Ä–∞–∑—Ä–æ–±–æ—Ç–∫–∞", "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í–µ–± –¥–∏–∑–∞–π–Ω", "Data Science", "–î–∏–∑–∞–π–Ω", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–¥–∞–∂–∏", "–ö–æ–Ω—Ç–µ–Ω—Ç", "–ü–µ—Ä–µ–≤–æ–¥—ã", "–í–∏–¥–µ–æ", "–ê—É–¥–∏–æ", "–ë–∏–∑–Ω–µ—Å-—É—Å–ª—É–≥–∏", "–î—Ä—É–≥–æ–µ"),
    index=None,
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
    )
    about = st.text_area("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —è –Ω–∞—á–∏–Ω–∞—é—â–∏–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ")

    # START JOB_EXPERIENCE
    st.header("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    if "num_experience" not in st.session_state:
        st.session_state.num_experience = 1
    if "job_experiences" not in st.session_state:
        st.session_state.job_experiences = {}

    for i in range(1, st.session_state.num_experience + 1):
        key = f"job_experience_{i}"
        defaults = st.session_state.job_experiences.get(key, ["", "", "–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "", "", ""])

        with st.expander(f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã #{i}", expanded=True):
            job_title = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å", value=defaults[0], key=f"job_title_{i}")
            company_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–∏–∏", value=defaults[1], key=f"company_name_{i}")
            work_type_options = ["–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–§—Ä–∏–ª–∞–Ω—Å"]
            work_type = st.selectbox("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏", work_type_options, index=work_type_options.index(defaults[2]), key=f"work_type_{i}")
            period = st.date_input(
                "–†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥",
                (datetime.date(2022, 1, 1), datetime.date(2023, 1, 7)),
                datetime.date(2022, 1, 1),
                datetime.date(2023, 1, 7),
                format="MM.DD.YYYY",
                key=f"period_{i}"
            )
            # skills = st.text_input("Skills", value=defaults[4], key=f"skills_{i}")
            skills = st_tags(label="–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", text="–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏", key=f"skills_{i}")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=defaults[5], key=f"description_{i}")

            st.session_state.job_experiences[key] = [job_title, company_name, work_type, period, skills, description]

    add_experience = st.button("–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    if add_experience:
        st.session_state.num_experience += 1

    # st.markdown(st.session_state.job_experiences)
    # END JOB_EXPERIENCE

    # START EDUCATION
    st.header("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    if "num_education" not in st.session_state:
        st.session_state.num_education = 1
    if "educations" not in st.session_state:
        st.session_state.educations = {}

    for i in range(1, st.session_state.num_education + 1):
        key = f"education_{i}"
        defaults = st.session_state.educations.get(key, ["", "", "–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "", "", ""])

        with st.expander(f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ #{i}", expanded=True):
            organization = st.text_input("Organization", key=f"organization_{i}")
            edu_period = st.date_input(
                "Period of work",
                (datetime.date(2022, 1, 1), datetime.date(2023, 1, 7)),
                max_value=datetime.date(2023, 1, 7),
                format="MM.DD.YYYY",
                key=f"edu_period_{i}"
            )
            degree = st.selectbox(
                "–°—Ç–µ–ø–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è",
                ("–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ë–∞–∫–∞–ª–∞–≤—Ä", "–ú–∞–≥–∏—Å—Ç—Ä", "–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫"),
                key=f"degree_{i}"
            )
            profession = st.text_input("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", key=f"profession_{i}")
            grade = st.number_input("–û—Ü–µ–Ω–∫–∞", key=f"grade_{i}", step=0.5)
            achievements = st_tags(label="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", text="–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏", key=f"achievements_{i}")

            st.session_state.educations[key] = [organization, edu_period, degree, grade, achievements, profession]

    add_education = st.button("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    if add_education:
        st.session_state.num_education += 1

    # st.markdown(st.session_state.educations)
    # END EDUCATION

    languages = st_tags(label="## –Ø–∑—ã–∫–∏", text="–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏")

    hard_skills = st_tags(label="## –•–∞—Ä–¥ —Å–∫–∏–ª—ã", text="–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏")

    soft_skills = st_tags(label="## –°–æ—Ñ—Ç —Å–∫–∏–ª—ã", text="–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏")

    st.header("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    hourly_rate = st.number_input("–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –≤ —Ç–µ–Ω–≥–µ/—á–∞—Å", min_value=0, value=0)


    # def cut_text_by_tokens(text: str, limit: int = 4096):
    #     # Cut text for specific amount of tokens
    #     tokens = encoding.encode(data)
    #     current_part = []
    #     current_count = 0

    #     # SELECT AMOUNT OF TOKENS
    #     for token in tokens:
    #         current_part.append(token)
    #         current_count += 1
    #         if current_count >= limit:
    #             return "".join([encoding.decode_single_token_bytes(token).decode("utf-8", errors="replace") for token in current_part])

    #     return text


    # def make_response(data: str):
    #     cutted_text = cut_text_by_tokens(data)
    #     return llm.predict(cutted_text)


    submitted = st.button("–ê–Ω–∞–ª–∏–∑ –ü—Ä–æ—Ñ–∏–ª—è", type="primary")
    if submitted:
        st.session_state.messages = []
        st.title("üìë –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
    # if submitted:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        # hourly_rate domain job_category about
        job_data = st.session_state.job_experiences.values()
        edu_data = st.session_state.educations.values()
        langs = ",".join(languages)
        h_skills = ",".join(hard_skills)
        s_skills = ",".join(soft_skills)

        job_template = "–ö–æ–º–ø–∞–Ω–∏—è: {company} –î–æ–ª–∂–Ω–æ—Å—Ç—å: {domain}. –ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã: —Å {started_date} –ø–æ {end_date}. –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {skills}. –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {description}"
        job_experiences = []
        index = 0
        for job in job_data:
            if (index == 2):
                break
            # [job_title, company_name, work_type, period, skills, description]
            job_experiences.append(job_template.format(
                company=job[1],
                domain=job[0],
                started_date=str(job[3][0]),
                end_date=str(job[3][1]),
                skills=",".join(skills),
                description=job[5]
            ))
            index += 1
        edu_template = "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {company} –°—Ç–µ–ø–µ–Ω—å: {degree}. –ü–µ—Ä–∏–æ–¥ —É—á–µ–±—ã: —Å {started_date} –ø–æ {end_date}. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {profession}. GPA: {grade}"
        edu_experiences = []
        for edu in edu_data:
            # [organization, edu_period, degree, grade, achievements, profession] # skeleton of edu
            edu_experiences.append(edu_template.format(
                company=edu[0],
                degree=edu[2],
                started_date=str(edu[1][0]),
                end_date=str(edu[1][1]),
                profession=edu[5],
                grade=edu[3]
            ))

        data = prompt_template.format(
            position=domain, 
            category=job_category, 
            about=about, 
            languages=langs, 
            hard_skills=h_skills, 
            soft_skills=s_skills, 
            price=hourly_rate,
            education=".".join(edu_experiences),
            job_experience=".".join(job_experiences)
        )

        # st.write(data)

        st.session_state.messages.append({"role": "user", "content": data})
        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            for response in openai.ChatCompletion.create(
                model=st.session_state["openai_model"],
                messages=[
                    {"role": m["role"], "content": m["content"]}
                    for m in st.session_state.messages
                ],
                stream=True,
            ):
                full_response += response.choices[0].delta.get("content", "")
                message_placeholder.markdown(full_response + "‚ñå")
            message_placeholder.markdown(full_response)
        st.session_state.messages.append({"role": "assistant", "content": full_response})

